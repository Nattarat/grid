// //////////////////////////////////////////////////////////////////////////////////////////////////
// ==================================================================================================
//
// Grid system
//
// ==================================================================================================
// //////////////////////////////////////////////////////////////////////////////////////////////////

.gs {
  /* Parent style   ------------------------------ */
  display: flex;
  flex-wrap: wrap;
  flex: 1;

  /* Children style ------------------------------ */
  > .gs-col {
    transition: $transition-elastic;

    // Flex utilities
    // .................................
    &.is-grow {
      flex: 1;
    }

    &.is-narrow {
      flex: none;
    }

    &.is-stack {
      flex: none;
      width: 100%;
    }

    // Flex narrow for stack column
    // .................................
    @each $breakpoint-max, $breakpoint-name in $breakpoint-names {
      @media (max-width: $breakpoint-max) {
        &.is-#{$breakpoint-name}-stack {
          flex: none;
          width: 100%;
        }
      }
    }
  }

  /* Other component style ----------------------- */

  /* Modifier style ------------------------------ */
  // Flex percent
  // .................................
  &.is-cols {
    > .gs-col {
      @for $i from 0 through $grid-system - 1 {
        &.is-#{$grid-system - $i} {
          width: calc((100% * ($grid-system - $i)) / $grid-system);
        }
      }

      @each $breakpoint-min, $breakpoint-name in $breakpoint-names {
        @media (min-width: $breakpoint-min) {
          @for $i from 0 through $grid-system - 1 {
            &.is-#{$breakpoint-name}-#{$grid-system - $i} {
              width: calc((100% * ($grid-system - $i)) / $grid-system);
            }
          }
        }
      }
    }
  }

  // Gutter
  // .................................
  // Horizontal
  @each $gutter-width, $gutter-name in $gutter-horizontal-names {
    &.is-#{$gutter-name} {
      margin-left: -$gutter-width;

      > .gs-col {
        padding-left: $gutter-width;
      }
    }
  }

  // Vertical
  @each $gutter-height, $gutter-name in $gutter-vertical-names {
    &.is-#{$gutter-name} {
      margin-top: -$gutter-height;

      > .gs-col {
        margin-top: $gutter-height;
      }
    }
  }

  // Horizontal & Vertical reponsive (for flex percent)
  @each $breakpoint-min, $breakpoint-name in $breakpoint-names {
    @media (min-width: $breakpoint-min) {
      // Horizontal responsive
      @each $gutter-width, $gutter-name in $gutter-horizontal-names {
        &.is-#{$breakpoint-name}-#{$gutter-name} {
          margin-left: -$gutter-width;

          > .gs-col {
            padding-left: $gutter-width;
          }
        }
      }

      // Vertical responsive
      @each $gutter-height, $gutter-name in $gutter-vertical-names {
        &.is-#{$breakpoint-name}-#{$gutter-name} {
          margin-top: -$gutter-height;

          > .gs-col {
            margin-top: $gutter-height;
          }
        }
      }
    }
  }

  // Horizontal & Vertical reponsive (for flex number)
  &:not(.is-cols) {
    @each $breakpoint-max, $breakpoint-name in $breakpoint-names {
      @media (max-width: $breakpoint-max) {
        // Horizontal responsive
        @each $gutter-width, $gutter-name in $gutter-horizontal-names {
          &.is-#{$breakpoint-name}-#{$gutter-name} {
            margin-left: -$gutter-width;

            > .gs-col {
              padding-left: $gutter-width;
            }
          }
        }

        // Vertical responsive
        @each $gutter-height, $gutter-name in $gutter-vertical-names {
          &.is-#{$breakpoint-name}-#{$gutter-name} {
            margin-top: -$gutter-height;

            > .gs-col {
              margin-top: $gutter-height;
            }
          }
        }
      }
    }
  }

  // Alignment
  // .................................
  &.is-start {
    justify-content: flex-start;
  }

  &.is-end {
    justify-content: flex-end;
  }

  &.is-center {
    justify-content: center;
  }

  &.is-spacebetween {
    justify-content: space-between;
  }

  @each $breakpoint-min, $breakpoint-name in $breakpoint-names {
    @media (min-width: $breakpoint-min) {
      &.is-#{$breakpoint-name}-start {
        justify-content: flex-start;
      }

      &.is-#{$breakpoint-name}-end {
        justify-content: flex-end;
      }

      &.is-#{$breakpoint-name}-center {
        justify-content: center;
      }

      &.is-#{$breakpoint-name}-spacebetween {
        justify-content: space-between;
      }
    }
  }
}
